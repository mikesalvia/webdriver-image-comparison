{"version":3,"file":"afterScreenshot.js","sourceRoot":"","sources":["../../lib/helpers/afterScreenshot.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-ignore\nimport {red, yellow} from 'chalk';\nimport hideScrollBars from '../clientSideScripts/hideScrollbars';\nimport removeCustomCss from '../clientSideScripts/removeCustomCss';\nimport {CUSTOM_CSS_ID} from './constants';\nimport {checkIsMobile, formatFileName, getAndCreatePath} from './utils';\nimport {saveBase64Image} from '../methods/images';\nimport {join} from 'path';\nimport {Executor} from '../methods/methods.interface';\nimport {AfterScreenshotOptions, ScreenshotOutput} from './afterScreenshot.interfaces';\nimport hideRemoveElements from '../clientSideScripts/hideRemoveElements';\n\n/**\n * Methods that need to be executed after a screenshot has been taken\n * to set all back to the original state\n */\nexport default async function afterScreenshot(executor: Executor, options: AfterScreenshotOptions): Promise<ScreenshotOutput> {\n  const {\n    actualFolder,\n    base64Image,\n    disableCSSAnimation,\n    fileName: fileNameOptions,\n    filePath,\n    hideElements,\n    hideScrollBars: noScrollBars,\n    platformName,\n    removeElements,\n    colorToBlack\n  } = options;\n\n  // Get/create the path to save image\n  const pathForSaving = getAndCreatePath(actualFolder, filePath);\n  \n  // Format a file name for image\n  const savedImageFileName = formatFileName(fileNameOptions);\n\n  // Join path and filename\n  const savedImagePath = join(pathForSaving, savedImageFileName);\n\n  let mutatableBase64Image : any;\n\n  const switchColorToBlack = (base64Image: string) => {\n    return new Promise((resolve, reject) => {\n      const fs = require('fs');\n      const originalImagePath = savedImagePath.replace(\".png\", \"-orig.png\");  \n      const monochromeImagePath = savedImagePath.replace(\".png\", \"-mono.png\");\n      fs.writeFileSync(originalImagePath, base64Image, { encoding: 'base64' });\n\n      const gm = require('gm');\n      const platformBlackThreshold = platformName.toLowerCase().includes(\"ios\") ? \"85%\" : \"100%\";\n      gm(originalImagePath).blackThreshold(platformBlackThreshold).write(monochromeImagePath, function (error: any) { \n        if (error) {\n          console.log(red(`\n#####################################################################################\n  ⚠️  An error occurred while attempting to convert colors in image to black:\n  ❗  ${error}\n#####################################################################################\n          `))\n          if (error.toString().indexOf(\"gm/convert binaries can't be found\")) {\n            console.log(red(`\n#####################################################################################\n  📦  Binaries are missing, install GraphicsMagick\n#####################################################################################\n            `))\n          }\n          resolve(base64Image)\n        } else {\n          const base64ImageConverter = require('base64-img');\n          const base64ImageMonochrome = base64ImageConverter.base64Sync(monochromeImagePath).replace(\"data:image/png;base64,\", \"\");        \n          resolve(base64ImageMonochrome);\n        }\n      });\n    });\n  }\n\n  // Apply color to black transformation to base64 image data\n  if (colorToBlack) { \n    mutatableBase64Image = await switchColorToBlack(base64Image);\n  }\n  \n  // Save the element\n  await saveBase64Image(mutatableBase64Image, savedImagePath);\n\n  // Show the scrollbars again\n  /* istanbul ignore else */\n  if (noScrollBars) {\n    await executor(hideScrollBars, !noScrollBars);\n  }\n\n  // Show elements again\n  /* istanbul ignore else */\n  if (hideElements.length > 0 || removeElements.length > 0) {\n    await executor(hideRemoveElements, {hide: hideElements, remove: removeElements}, false);\n  }\n\n  // Remove the custom set css\n  /* istanbul ignore else */\n  if (disableCSSAnimation || checkIsMobile(platformName)) {\n    await executor(removeCustomCss, CUSTOM_CSS_ID);\n  }\n  \n  // Return the needed data\n  return {\n    fileName: savedImageFileName,\n    path: pathForSaving,\n    devicePixelRatio: fileNameOptions.devicePixelRatio,\n  };\n}\n"]}